"""
Data Processor for Credit Risk Analysis

This module handles the core data processing logic for agent data,
including feature engineering and JSON output generation.
"""

import os
import json
import logging
import pandas as pd
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

# Import utilities
import sys
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from scripts.utils.json_cache import get_agent_data, update_agent_data, get_all_agents_data, is_cache_valid

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Constants
PROJECT_ROOT = Path(__file__).parent.parent
DEFAULT_DATA_DIR = PROJECT_ROOT / 'source_data'
DEFAULT_OUTPUT_DIR = PROJECT_ROOT / 'output'


class DataProcessor:
    """Core data processing class for agent analysis."""
    
    def __init__(self, data_dir: Optional[Path] = None, output_dir: Optional[Path] = None):
        """Initialize the data processor."""
        self.data_dir = data_dir or DEFAULT_DATA_DIR
        self.output_dir = output_dir or DEFAULT_OUTPUT_DIR
        
        # Ensure directories exist
        self.data_dir.mkdir(parents=True, exist_ok=True)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        self.agents_df = None
        self.sales_df = None
        self.agent_data = {}
    
    def load_data(self) -> None:
        """Load and prepare the required data."""
        logger.info("Loading agent and sales data...")
        try:
            # Load agent data
            agent_file = self.data_dir / 'credit_Agents.xlsx'
            self.agents_df = pd.read_excel(
                agent_file,
                dtype={'Bzid': str, 'Credit Limit': float, 'Credit Line Balance': float}
            )
            
            # Load sales data if available
            sales_file = self.data_dir / 'sales_data.xlsx'
            if sales_file.exists():
                self.sales_df = pd.read_excel(
                    sales_file,
                    parse_dates=['transaction_date'],
                    dtype={'Bzid': str, 'amount': float}
                )
            else:
                self.sales_df = pd.DataFrame()
                logger.warning(f"Sales data file not found: {sales_file}")
            
            logger.info(f"Loaded {len(self.agents_df)} agents and {len(self.sales_df)} sales records")
            
        except Exception as e:
            logger.error(f"Error loading data: {e}")
            raise
    
    def process_all_agents(self) -> Dict[str, Any]:
        """Process all agents and return results."""
        if self.agents_df is None:
            self.load_data()
        
        results = {}
        for _, agent in self.agents_df.iterrows():
            agent_id = agent['Bzid']
            try:
                results[agent_id] = self.process_agent(agent_id)
            except Exception as e:
                logger.error(f"Error processing agent {agent_id}: {e}")
                continue
        
        return results
    
    def process_agent(self, agent_id: str) -> Dict[str, Any]:
        """Process data for a single agent."""
        agent_data = {
            'id': agent_id,
            'credit_utilization': self.calculate_credit_utilization(agent_id),
            'repayment_metrics': self.calculate_repayment_metrics(agent_id),
            'risk_score': self.calculate_risk_score(agent_id),
            'last_updated': datetime.now().isoformat()
        }
        return agent_data
    
    def calculate_credit_utilization(self, agent_id: str) -> Dict[str, float]:
        """Calculate credit utilization metrics."""
        # Implementation here
        return {}
    
    def calculate_repayment_metrics(self, agent_id: str) -> Dict[str, float]:
        """Calculate repayment-related metrics."""
        # Implementation here
        return {}
    
    def calculate_risk_score(self, agent_id: str) -> float:
        """Calculate risk score for an agent."""
        # Implementation here
        return 0.0
    
    def save_results(self, results: Dict[str, Any]) -> Path:
        """Save results to JSON file."""
        output_file = self.output_dir / 'agent_analysis.json'
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            logger.info(f"Results saved to {output_file}")
            return output_file
        except Exception as e:
            logger.error(f"Error saving results: {e}")
            raise


def main() -> int:
    """Main function to run the data processor."""
    try:
        processor = DataProcessor()
        results = processor.process_all_agents()
        processor.save_results(results)
        return 0
    except Exception as e:
        logger.error(f"Error in main: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
